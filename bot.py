import os
import json
from pathlib import Path
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import httpx

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö ===
from dotenv import load_dotenv
load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN") or "8306127980:AAHGXcF1rA-Sg0ACbvG6j3i5diOBUDCQBjI"
KINOPOISK_API_KEY = os.getenv("KINOPOISK_API_KEY") or "E6XED3B-W1V4X10-K70S8ZP-42YE6YS"  # ‚Üê –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot)

# === –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π –∏ –∏—Å—Ç–æ—Ä–∏–∏ ===
SESSIONS_FILE = Path("sessions.json")
HISTORY_FILE = Path("history.json")

def load_json(file: Path):
    if file.exists():
        with open(file, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_json(file: Path, data):
    with open(file, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# === –ñ–∞–Ω—Ä—ã (—Ç–æ–ª—å–∫–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ) ===
GENRES = [
    "–∞–Ω–∏–º–µ", "–±–∏–æ–≥—Ä–∞—Ñ–∏—è", "–±–æ–µ–≤–∏–∫", "–≤–µ—Å—Ç–µ—Ä–Ω", "–≤–æ–µ–Ω–Ω—ã–π", "–¥–µ—Ç–µ–∫—Ç–∏–≤", "–¥–µ—Ç—Å–∫–∏–π",
    "–¥–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π", "–¥—Ä–∞–º–∞", "–∏–≥—Ä–∞", "–∏—Å—Ç–æ—Ä–∏—è", "–∫–æ–º–µ–¥–∏—è", "–∫–æ—Ä–æ—Ç–∫–æ–º–µ—Ç—Ä–∞–∂–∫–∞",
    "–∫—Ä–∏–º–∏–Ω–∞–ª", "–º–µ–ª–æ–¥—Ä–∞–º–∞", "–º–∏—Å—Ç–∏–∫–∞", "–º—É–ª—å—Ç—Ñ–∏–ª—å–º", "–º—é–∑–∏–∫–ª", "–Ω–æ–≤–æ—Å—Ç–∏",
    "–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è", "—Ä–µ–∞–ª—å–Ω–æ–µ –¢–í", "—Å–µ–º–µ–π–Ω—ã–π", "—Å–ø–æ—Ä—Ç", "—Ç—Ä–∏–ª–ª–µ—Ä", "—É–∂–∞—Å—ã",
    "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", "—Ñ—ç–Ω—Ç–µ–∑–∏", "—Ü–µ—Ä–µ–º–æ–Ω–∏—è"
]

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∂–∞–Ω—Ä–æ–≤ ===
def get_genre_keyboard():
    buttons = []
    for genre in GENRES:
        buttons.append(InlineKeyboardButton(text=genre.capitalize(), callback_data=f"genre_{genre}"))
    rows = [buttons[i:i + 3] for i in range(0, len(buttons), 3)]
    return InlineKeyboardMarkup(inline_keyboard=rows)

# === –°–µ—Å—Å–∏–∏ ===
def get_session(user_id):
    sessions = load_json(SESSIONS_FILE)
    return sessions.get(str(user_id))

def set_session(user_id, data):
    sessions = load_json(SESSIONS_FILE)
    sessions[str(user_id)] = data
    save_json(SESSIONS_FILE, sessions)

def add_to_history(user_id, movie):
    history = load_json(HISTORY_FILE)
    user_key = str(user_id)
    if user_key not in history:
        history[user_key] = []
    entry = {
        "id": movie.get("id"),
        "name": movie.get("name"),
        "year": movie.get("year"),
        "rating": movie.get("rating", {}).get("kp"),
        "poster": movie.get("poster", {}).get("url")
    }
    if entry not in history[user_key]:
        history[user_key].append(entry)
    save_json(HISTORY_FILE, history)

# === –ó–∞–ø—Ä–æ—Å –∫ API ===
async def fetch_movies(genre: str, page: int = 1):
    url = "https://api.kinopoisk.dev/v2.2/movie"
    headers = {
        "X-API-KEY": KINOPOISK_API_KEY,
        "User-Agent": "MovieBot/1.0 (Telegram Bot)"
    }
    params = {
        "genres.name": genre,
        "page": page,
        "limit": 20,
        "rating.kp": "4.5-10"
    }
    async with httpx.AsyncClient(timeout=10) as client:
        r = await client.get(url, headers=headers, params=params)
        print(f"üîç –ó–∞–ø—Ä–æ—Å: –∂–∞–Ω—Ä={genre}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞={page} ‚Üí –°—Ç–∞—Ç—É—Å: {r.status_code}")
        try:
            return r.json() if r.status_code == 200 else {"docs": []}
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            print(f"üì° –û—Ç–≤–µ—Ç: {r.text[:200]}")
            return {"docs": []}

async def send_movie_list(message, movies, page, start_index=1):
    if not movies:
        await message.answer("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    text = f"üîç –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}\n\n"
    buttons = []
    for i, m in enumerate(movies, start=start_index):
        name = m.get("name", "‚Äî")
        year = m.get("year", "?")
        rating = m.get("rating", {}).get("kp", "‚Äî")
        text += f"{i}. üé¨ <b>{name}</b> ({year}) ‚Äî ‚≠ê{rating}\n"
        buttons.append([InlineKeyboardButton(text=f"üëÅÔ∏è {i}", callback_data=f"detail_{m['id']}")])

    nav = []
    if page > 1:
        nav.append(InlineKeyboardButton(text="‚èÆÔ∏è –ù–∞–∑–∞–¥", callback_data="prev_page"))
    nav.append(InlineKeyboardButton(text="‚è≠Ô∏è –î—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã", callback_data="next_page"))
    buttons.append(nav)

    await message.answer(
        text,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    await message.answer(
        "üöÄ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MovieBot!</b>\n\n"
        "–ß—Ç–æ —è —É–º–µ—é:\n"
        "‚Ä¢ –ü–æ–¥–±–∏—Ä–∞—Ç—å —Ñ–∏–ª—å–º—ã –ø–æ –∂–∞–Ω—Ä–∞–º\n"
        "‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ—Å—Ç–µ—Ä—ã, —Ä–µ–π—Ç–∏–Ω–≥, –æ–ø–∏—Å–∞–Ω–∏–µ\n"
        "‚Ä¢ –î–∞–≤–∞—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞\n"
        "‚Ä¢ –ó–∞–ø–æ–º–∏–Ω–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤–∞—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä –Ω–∏–∂–µ üëá",
        parse_mode="HTML",
        reply_markup=get_genre_keyboard()
    )

@dp.callback_query_handler(lambda c: c.data.startswith("genre_"))
async def handle_genre(callback: types.CallbackQuery):
    await callback.answer()
    genre = callback.data.split("_", 1)[1]
    await callback.message.answer(f"üîç –ò—â—É —Ñ–∏–ª—å–º—ã –≤ –∂–∞–Ω—Ä–µ ¬´{genre}¬ª —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º –æ—Ç 4.5...")

    data = await fetch_movies(genre, page=1)
    movies = data.get("docs", [])

    if not movies:
        await callback.message.answer("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–∂–µ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º –æ—Ç 4.5.")
        return

    set_session(callback.from_user.id, {"genre": genre, "page": 1})
    await send_movie_list(callback.message, movies, 1, start_index=1)

@dp.callback_query_handler(lambda c: c.data == "next_page")
async def next_page(callback: types.CallbackQuery):
    await callback.answer()
    session = get_session(callback.from_user.id)
    if not session:
        await callback.message.answer("–°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ —Å /start.")
        return

    new_page = session["page"] + 1
    data = await fetch_movies(session["genre"], page=new_page)
    movies = data.get("docs", [])
    if not movies:
        await callback.answer("–ë–æ–ª—å—à–µ —Ñ–∏–ª—å–º–æ–≤ –Ω–µ—Ç.", show_alert=True)
        return

    set_session(callback.from_user.id, {"genre": session["genre"], "page": new_page})
    start_index = (new_page - 1) * 20 + 1
    await send_movie_list(callback.message, movies, new_page, start_index)

@dp.callback_query_handler(lambda c: c.data == "prev_page")
async def prev_page(callback: types.CallbackQuery):
    await callback.answer()
    session = get_session(callback.from_user.id)
    if not session or session["page"] <= 1:
        await callback.answer("–≠—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞.")
        return

    new_page = session["page"] - 1
    data = await fetch_movies(session["genre"], page=new_page)
    movies = data.get("docs", [])
    set_session(callback.from_user.id, {"genre": session["genre"], "page": new_page})
    start_index = (new_page - 1) * 20 + 1
    await send_movie_list(callback.message, movies, new_page, start_index)

@dp.callback_query_handler(lambda c: c.data.startswith("detail_"))
async def show_detail(callback: types.CallbackQuery):
    await callback.answer()
    movie_id = callback.data.split("_", 1)[1]
    headers = {
        "X-API-KEY": KINOPOISK_API_KEY,
        "User-Agent": "MovieBot/1.0 (Telegram Bot)"
    }
    async with httpx.AsyncClient() as client:
        r = await client.get(f"https://api.kinopoisk.dev/v2.2/movie/{movie_id}", headers=headers)
        try:
            movie = r.json() if r.status_code == 200 else None
        except:
            movie = None

    if not movie:
        await callback.message.answer("–§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    add_to_history(callback.from_user.id, movie)

    name = movie.get("name", "‚Äî")
    year = movie.get("year", "?")
    rating = movie.get("rating", {}).get("kp", "‚Äî")
    runtime = movie.get("movieLength", "?")
    genres = ", ".join([g["name"] for g in movie.get("genres", [])])
    desc = (movie.get("description") or movie.get("shortDescription") or "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")[:400] + "..."
    poster = movie.get("poster", {}).get("url") or "https://via.placeholder.com/300x450?text=No+Poster"

    kp_id = movie.get("id", "")
    kinopoisk_url = f"https://www.kinopoisk.ru/film/{kp_id}/"
    ivi_url = f"https://www.ivi.ru/search/?q={name.replace(' ', '+')}"
    okko_url = f"https://okko.tv/search?text={name.replace(' ', '+')}"

    caption = (
        f"üé¨ <b>{name}</b> ‚Ä¢ {year}\n"
        f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating} | ‚è±Ô∏è {runtime} –º–∏–Ω\n"
        f"üé≠ –ñ–∞–Ω—Ä—ã: {genres}\n\n"
        f"üìù {desc}\n\n"
        f"üîó –ì–¥–µ —Å–º–æ—Ç—Ä–µ—Ç—å:\n"
        f"‚Ä¢ <a href='{kinopoisk_url}'>–ö–∏–Ω–æ–ø–æ–∏—Å–∫</a>\n"
        f"‚Ä¢ <a href='{ivi_url}'>IVI</a>\n"
        f"‚Ä¢ <a href='{okko_url}'>Okko</a>"
    )

    await bot.send_photo(
        chat_id=callback.from_user.id,
        photo=poster,
        caption=caption,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å –Ω–∞ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–µ", url=kinopoisk_url)
        )
    )

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    print(f"üîë Telegram Token (—á–∞—Å—Ç–∏—á–Ω–æ): ...{TELEGRAM_TOKEN[-5:]}")
    print(f"üîë Kinopoisk API Key (—á–∞—Å—Ç–∏—á–Ω–æ): ...{KINOPOISK_API_KEY[-5:]}")
    executor.start_polling(dp, skip_updates=True)
