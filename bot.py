import asyncio
import httpx
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from dotenv import load_dotenv
import os
from session import set_session, get_session, add_to_history

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
KINOPOISK_API_KEY = "FB86TF8-K4V4FTQ-NQ8J2SY-7P6WV49"
KINOPOISK_URL = "https://api.kinopoisk.dev/v1.4/movie"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
router = Router()

GENRES = {
    "–ë–æ–µ–≤–∏–∫": "–±–æ–µ–≤–∏–∫",
    "–î—Ä–∞–º–∞": "–¥—Ä–∞–º–∞",
    "–ö–æ–º–µ–¥–∏—è": "–∫–æ–º–µ–¥–∏—è",
    "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞": "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞",
    "–¢—Ä–∏–ª–ª–µ—Ä": "—Ç—Ä–∏–ª–ª–µ—Ä",
    "–î–µ—Ç–µ–∫—Ç–∏–≤": "–¥–µ—Ç–µ–∫—Ç–∏–≤",
    "–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è": "–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è",
}

async def fetch_movies(genre: str, page: int = 1):
    params = {
        "genres.name": genre,
        "rating.kp": "4.5-10",          # ‚úÖ –ü–û–ù–ò–ñ–ï–ù –ü–û–†–û–ì –¥–æ 4.5!
        "type": "movie",
        "movieLength": "60-300",        # –æ—Ç 1 —á–∞—Å–∞
        "votes.kp": "1000-",            # –º–∏–Ω–∏–º—É–º 1000 –≥–æ–ª–æ—Å–æ–≤ (—á—Ç–æ–±—ã –Ω–µ –º—É—Å–æ—Ä)
        "limit": 10,
        "page": page
    }
    headers = {"X-API-KEY": KINOPOISK_API_KEY}
    async with httpx.AsyncClient() as client:
        r = await client.get(KINOPOISK_URL, params=params, headers=headers)
        return r.json() if r.status_code == 200 else {"docs": [], "pages": 0}

@router.message(Command("start"))
async def start(message: Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéØ –í—ã–±—Ä–∞—Ç—å –∂–∞–Ω—Ä", callback_data="genres")],
        [InlineKeyboardButton(text="üïí –ò—Å—Ç–æ—Ä–∏—è", callback_data="history")]
    ])
    await message.answer("üé¨ –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –∂–∞–Ω—Ä –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏ –∏—Å—Ç–æ—Ä–∏—é.", reply_markup=kb)

@router.callback_query(F.data == "genres")
async def show_genres(callback: CallbackQuery):
    buttons = [[InlineKeyboardButton(text=name, callback_data=f"genre_{eng}")] for name, eng in GENRES.items()]
    rows = [buttons[i:i+2] for i in range(0, len(buttons), 2)]
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏ –∂–∞–Ω—Ä:", reply_markup=InlineKeyboardMarkup(inline_keyboard=rows))

@router.callback_query(F.data.startswith("genre_"))
async def handle_genre(callback: CallbackQuery):
    genre = callback.data.split("_", 1)[1]
    await callback.message.answer(f"üîç –ò—â—É —Ñ–∏–ª—å–º—ã –≤ –∂–∞–Ω—Ä–µ ¬´{genre}¬ª —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º –æ—Ç 4.5...")

    data = await fetch_movies(genre, page=1)
    movies = data.get("docs", [])

    if not movies:
        await callback.message.answer("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–∂–µ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º –æ—Ç 4.5. –í–æ–∑–º–æ–∂–Ω–æ, API –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")
        return

    set_session(callback.from_user.id, {"genre": genre, "page": 1})
    await send_movie_list(callback.message, movies, 1)

async def send_movie_list(message_or_callback, movies, page):
    text = f"üîç –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}\n\n"
    buttons = []
    for i, m in enumerate(movies, 1):
        year = m.get("year", "?")
        rating = m.get("rating", {}).get("kp", 0)
        name = m.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        text += f"{i}. üé¨ *{name}* ({year}) ‚Äî ‚≠ê{rating}\n"
        buttons.append([InlineKeyboardButton(text=f"üëÅÔ∏è {i}", callback_data=f"detail_{m['id']}")])

    nav_buttons = []
    if page > 1:
        nav_buttons.append(InlineKeyboardButton(text="‚èÆÔ∏è –ù–∞–∑–∞–¥", callback_data="prev_page"))
    nav_buttons.append(InlineKeyboardButton(text="‚è≠Ô∏è –î—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã", callback_data="next_page"))
    buttons.append(nav_buttons)

    if hasattr(message_or_callback, 'message'):
        await message_or_callback.message.edit_text(text, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
    else:
        await message_or_callback.answer(text, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))

@router.callback_query(F.data == "next_page")
async def next_page(callback: CallbackQuery):
    session = get_session(callback.from_user.id)
    if not session:
        await callback.answer("–°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏ —Å /start.")
        return
    new_page = session["page"] + 1
    data = await fetch_movies(session["genre"], page=new_page)
    movies = data.get("docs", [])
    if not movies:
        await callback.answer("–ë–æ–ª—å—à–µ —Ñ–∏–ª—å–º–æ–≤ –Ω–µ—Ç.", show_alert=True)
        return
    set_session(callback.from_user.id, {"genre": session["genre"], "page": new_page})
    await send_movie_list(callback, movies, new_page)

@router.callback_query(F.data == "prev_page")
async def prev_page(callback: CallbackQuery):
    session = get_session(callback.from_user.id)
    if not session or session["page"] <= 1:
        await callback.answer("–≠—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞.")
        return
    new_page = session["page"] - 1
    data = await fetch_movies(session["genre"], page=new_page)
    movies = data.get("docs", [])
    set_session(callback.from_user.id, {"genre": session["genre"], "page": new_page})
    await send_movie_list(callback, movies, new_page)

@router.callback_query(F.data.startswith("detail_"))
async def show_detail(callback: CallbackQuery):
    movie_id = callback.data.split("_", 1)[1]
    headers = {"X-API-KEY": KINOPOISK_API_KEY}
    async with httpx.AsyncClient() as client:
        r = await client.get(f"https://api.kinopoisk.dev/v1.4/movie/{movie_id}", headers=headers)  # ‚úÖ –ë–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤!
        movie = r.json() if r.status_code == 200 else None

    if not movie:
        await callback.answer("–§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    add_to_history(callback.from_user.id, movie)

    name = movie.get("name", "‚Äî")
    year = movie.get("year", "?")
    rating = movie.get("rating", {}).get("kp", 0)
    runtime = movie.get("movieLength", "?")
    genres = ", ".join([g["name"] for g in movie.get("genres", [])])
    desc = movie.get("description") or movie.get("shortDescription", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
    poster = movie.get("poster", {}).get("url")

    platforms = "–ö–∏–Ω–æ–ø–æ–∏—Å–∫ HD, IVI, Okko"
    awards = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

    caption = f"""üé¨ *{name}* ‚Ä¢ {year}
‚≠ê {rating} | ‚è≥ {runtime} –º–∏–Ω | üéØ {genres}

üìå {desc}

üèÜ –ù–∞–≥—Ä–∞–¥—ã: {awards}
üåê –ì–¥–µ —Å–º–æ—Ç—Ä–µ—Ç—å: {platforms}
"""

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –≠—Ç–æ –æ–Ω", callback_data="selected")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_list")]
    ])

    if poster:
        await callback.message.answer_photo(photo=poster, caption=caption, parse_mode="Markdown", reply_markup=kb)
    else:
        await callback.message.answer(caption, parse_mode="Markdown", reply_markup=kb)

@router.callback_query(F.data == "selected")
async def selected(callback: CallbackQuery):
    await callback.message.answer("‚úÖ –û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –§–∏–ª—å–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –∏—Å—Ç–æ—Ä–∏—é.")

@router.callback_query(F.data == "history")
async def show_history(callback: CallbackQuery):
    from session import user_history
    history = user_history.get(callback.from_user.id, [])
    if not history:
        await callback.message.answer("üïó –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
        return
    text = "üïó –¢–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è:\n\n"
    for m in history[-5:]:
        text += f"‚Ä¢ üé¨ {m['name']} ({m.get('year', '?')})\n"
    await callback.message.answer(text)

dp.include_router(router)

if __name__ == "__main__":
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    asyncio.run(dp.start_polling(bot))
