import asyncio
import httpx
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from dotenv import load_dotenv
import os
from session import set_session, get_session, add_to_history

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
KINOPOISK_API_KEY = os.getenv("KINOPOISK_API_KEY")
KINOPOISK_URL = "https://api.kinopoisk.dev/v1.4/movie"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
router = Router()

# ‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∂–∞–Ω—Ä–æ–≤ (–≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∂–∞–Ω—Ä—ã Kinopoisk)
GENRES = {
    "–ë–æ–µ–≤–∏–∫": "–±–æ–µ–≤–∏–∫",
    "–î—Ä–∞–º–∞": "–¥—Ä–∞–º–∞",
    "–ö–æ–º–µ–¥–∏—è": "–∫–æ–º–µ–¥–∏—è",
    "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞": "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞",
    "–¢—Ä–∏–ª–ª–µ—Ä": "—Ç—Ä–∏–ª–ª–µ—Ä",
    "–î–µ—Ç–µ–∫—Ç–∏–≤": "–¥–µ—Ç–µ–∫—Ç–∏–≤",
    "–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è": "–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è",
    "–£–∂–∞—Å—ã": "—É–∂–∞—Å—ã",
    "–ú–µ–ª–æ–¥—Ä–∞–º–∞": "–º–µ–ª–æ–¥—Ä–∞–º–∞",
    "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π": "–∏—Å—Ç–æ—Ä–∏—è",
    "–í–æ–µ–Ω–Ω—ã–π": "–≤–æ–µ–Ω–Ω—ã–π",
    "–°–µ–º–µ–π–Ω—ã–π": "—Å–µ–º–µ–π–Ω—ã–π",
    "–§—ç–Ω—Ç–µ–∑–∏": "—Ñ—ç–Ω—Ç–µ–∑–∏",
    "–ö—Ä–∏–º–∏–Ω–∞–ª": "–∫—Ä–∏–º–∏–Ω–∞–ª",
    "–ë–∏–æ–≥—Ä–∞—Ñ–∏—è": "–±–∏–æ–≥—Ä–∞—Ñ–∏—è",
    "–î–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π": "–¥–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π",
    "–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π": "–º—É–∑—ã–∫–∞–ª—å–Ω—ã–π",
    "–°–ø–æ—Ä—Ç": "—Å–ø–æ—Ä—Ç",
    "–ó–∞—Ä—É–±–µ–∂–Ω—ã–π": "–∑–∞—Ä—É–±–µ–∂–Ω—ã–π",
    "–†–æ—Å—Å–∏–π—Å–∫–∏–π": "—Ä–æ—Å—Å–∏–π—Å–∫–∏–π",
    "–ê–Ω–∏–º–∞—Ü–∏—è": "–∞–Ω–∏–º–∞—Ü–∏—è",
    "–ö–æ—Ä–æ—Ç–∫–æ–º–µ—Ç—Ä–∞–∂–∫–∞": "–∫–æ—Ä–æ—Ç–∫–æ–º–µ—Ç—Ä–∞–∂–∫–∞",
    "–¢–í-—à–æ—É": "—Ç–≤-—à–æ—É",
    "–ú–∏–Ω–∏-—Å–µ—Ä–∏–∞–ª": "–º–∏–Ω–∏-—Å–µ—Ä–∏–∞–ª",
    "–°–µ—Ä–∏–∞–ª": "—Å–µ—Ä–∏–∞–ª",
    "–†–µ–∞–ª–∏—Ç–∏": "—Ä–µ–∞–ª–∏—Ç–∏",
    "–ö–æ–Ω—Ü–µ—Ä—Ç": "–∫–æ–Ω—Ü–µ—Ä—Ç",
    "–ò–≥—Ä–∞": "–∏–≥—Ä–∞",
    "–ö–≤–µ—Å—Ç": "–∫–≤–µ—Å—Ç",
    "–ü–æ–¥—Ä–æ—Å—Ç–∫–æ–≤—ã–π": "–ø–æ–¥—Ä–æ—Å—Ç–∫–æ–≤—ã–π",
    "–õ–ì–ë–¢": "–ª–≥–±—Ç",
    "–≠—Ä–æ—Ç–∏–∫–∞": "—ç—Ä–æ—Ç–∏–∫–∞",
    "–ù—É–∞—Ä": "–Ω—É–∞—Ä",
    "–í–µ—Å—Ç–µ—Ä–Ω": "–≤–µ—Å—Ç–µ—Ä–Ω",
    "–°–∫–∞–∑–∫–∞": "—Å–∫–∞–∑–∫–∞",
    "–ü–∞—Ä–æ–¥–∏—è": "–ø–∞—Ä–æ–¥–∏—è",
    "–ß—ë—Ä–Ω–∞—è –∫–æ–º–µ–¥–∏—è": "—á—ë—Ä–Ω–∞—è –∫–æ–º–µ–¥–∏—è",
    "–ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–π": "–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–π",
    "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π": "–ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π",
    "–†–µ–ª–∏–≥–∏–æ–∑–Ω—ã–π": "—Ä–µ–ª–∏–≥–∏–æ–∑–Ω—ã–π",
    "–°—É–ø–µ—Ä–≥–µ—Ä–æ–π": "—Å—É–ø–µ—Ä–≥–µ—Ä–æ–π",
    "–¢—Ä–∏–ª–ª–µ—Ä-–¥—Ä–∞–º–∞": "—Ç—Ä–∏–ª–ª–µ—Ä-–¥—Ä–∞–º–∞",
    "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-–¥—Ä–∞–º–∞": "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-–¥—Ä–∞–º–∞",
    "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-–±–æ–µ–≤–∏–∫": "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-–±–æ–µ–≤–∏–∫",
    "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-—Ç—Ä–∏–ª–ª–µ—Ä": "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-—Ç—Ä–∏–ª–ª–µ—Ä",
    "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-—É–∂–∞—Å—ã": "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-—É–∂–∞—Å—ã",
    "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-–∫–æ–º–µ–¥–∏—è": "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-–∫–æ–º–µ–¥–∏—è",
    "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-—Ñ—ç–Ω—Ç–µ–∑–∏": "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-—Ñ—ç–Ω—Ç–µ–∑–∏",
    "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-–º–µ–ª–æ–¥—Ä–∞–º–∞": "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-–º–µ–ª–æ–¥—Ä–∞–º–∞",
    "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-–∏—Å—Ç–æ—Ä–∏—è": "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-–∏—Å—Ç–æ—Ä–∏—è",
    "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-–≤–æ–µ–Ω–Ω—ã–π": "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-–≤–æ–µ–Ω–Ω—ã–π",
    "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-—Å–µ–º–µ–π–Ω—ã–π": "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-—Å–µ–º–µ–π–Ω—ã–π",
    "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-–¥–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π": "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-–¥–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π",
    "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-–º—É–∑—ã–∫–∞–ª—å–Ω—ã–π": "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-–º—É–∑—ã–∫–∞–ª—å–Ω—ã–π",
    "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-—Å–ø–æ—Ä—Ç": "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-—Å–ø–æ—Ä—Ç",
    "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-–∑–∞—Ä—É–±–µ–∂–Ω—ã–π": "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-–∑–∞—Ä—É–±–µ–∂–Ω—ã–π",
    "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-—Ä–æ—Å—Å–∏–π—Å–∫–∏–π": "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-—Ä–æ—Å—Å–∏–π—Å–∫–∏–π",
    "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-–∞–Ω–∏–º–∞—Ü–∏—è": "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-–∞–Ω–∏–º–∞—Ü–∏—è",
    "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-–∫–æ—Ä–æ—Ç–∫–æ–º–µ—Ç—Ä–∞–∂–∫–∞": "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-–∫–æ—Ä–æ—Ç–∫–æ–º–µ—Ç—Ä–∞–∂–∫–∞",
    "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-—Ç–≤-—à–æ—É": "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-—Ç–≤-—à–æ—É",
    "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-–º–∏–Ω–∏-—Å–µ—Ä–∏–∞–ª": "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-–º–∏–Ω–∏-—Å–µ—Ä–∏–∞–ª",
    "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-—Å–µ—Ä–∏–∞–ª": "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-—Å–µ—Ä–∏–∞–ª",
    "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-—Ä–µ–∞–ª–∏—Ç–∏": "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-—Ä–µ–∞–ª–∏—Ç–∏",
    "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-–∫–æ–Ω—Ü–µ—Ä—Ç": "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-–∫–æ–Ω—Ü–µ—Ä—Ç",
    "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-–∏–≥—Ä–∞": "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-–∏–≥—Ä–∞",
    "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-–∫–≤–µ—Å—Ç": "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-–∫–≤–µ—Å—Ç",
    "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-–ø–æ–¥—Ä–æ—Å—Ç–∫–æ–≤—ã–π": "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-–ø–æ–¥—Ä–æ—Å—Ç–∫–æ–≤—ã–π",
    "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-–ª–≥–±—Ç": "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-–ª–≥–±—Ç",
    "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-—ç—Ä–æ—Ç–∏–∫–∞": "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-—ç—Ä–æ—Ç–∏–∫–∞",
    "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-–Ω—É–∞—Ä": "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-–Ω—É–∞—Ä",
    "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-–≤–µ—Å—Ç–µ—Ä–Ω": "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-–≤–µ—Å—Ç–µ—Ä–Ω",
    "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-—Å–∫–∞–∑–∫–∞": "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-—Å–∫–∞–∑–∫–∞",
    "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-–ø–∞—Ä–æ–¥–∏—è": "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-–ø–∞—Ä–æ–¥–∏—è",
    "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-—á—ë—Ä–Ω–∞—è –∫–æ–º–µ–¥–∏—è": "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-—á—ë—Ä–Ω–∞—è –∫–æ–º–µ–¥–∏—è",
    "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–π": "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–π",
    "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-–ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π": "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-–ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π",
    "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-—Ä–µ–ª–∏–≥–∏–æ–∑–Ω—ã–π": "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-—Ä–µ–ª–∏–≥–∏–æ–∑–Ω—ã–π",
    "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-—Å—É–ø–µ—Ä–≥–µ—Ä–æ–π": "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞-—Å—É–ø–µ—Ä–≥–µ—Ä–æ–π",
}

async def fetch_movies(genre: str, page: int = 1):
    params = {
        "genres.name": genre,
        "rating.kp": "4.0-10",
        "type": "movie",
        "movieLength": "60-300",
        "limit": 20,
        "page": page
    }
    headers = {"X-API-KEY": KINOPOISK_API_KEY}
    
    print(f"üîç –ó–∞–ø—Ä–æ—Å –∫ API: –∂–∞–Ω—Ä={genre}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞={page}")
    
    async with httpx.AsyncClient() as client:
        r = await client.get(KINOPOISK_URL, params=params, headers=headers)
        print(f"üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {r.status_code}")
        
        if r.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {r.text}")
            return {"docs": [], "pages": 0}
        
        try:
            data = r.json()
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Ñ–∏–ª—å–º–æ–≤: {len(data.get('docs', []))}")
            return data
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            return {"docs": [], "pages": 0}

@router.message(Command("start"))
async def start(message: Message):
    text = """üé¨ *MyMovieRecBot* ‚Äî —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ –∫–∏–Ω–æ!

üìå –ß—Ç–æ —è —É–º–µ—é:
- üéØ –í—ã–±–∏—Ä–∞—Ç—å —Ñ–∏–ª—å–º—ã –ø–æ –∂–∞–Ω—Ä—É (–±–æ–ª–µ–µ 50 –∂–∞–Ω—Ä–æ–≤!)
- üì∫ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ (—Ä–µ–π—Ç–∏–Ω–≥, –æ–ø–∏—Å–∞–Ω–∏–µ, –≥–¥–µ —Å–º–æ—Ç—Ä–µ—Ç—å)
- üîÅ –õ–∏—Å—Ç–∞—Ç—å —Å–ø–∏—Å–∫–∏ —Ñ–∏–ª—å–º–æ–≤ (–¥–æ 20 —à—Ç—É–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É)
- üìö –°–æ—Ö—Ä–∞–Ω—è—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
- üîó –û—Ç–∫—Ä—ã–≤–∞—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã (–ò–≤–∏, Okko, Kinopoisk HD –∏ –¥—Ä.)
- üÜì –ù–∞—Ö–æ–¥–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–∞–π—Ç—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞

üëâ –ù–∞—á–Ω–∏ —Å –≤—ã–±–æ—Ä–∞ –∂–∞–Ω—Ä–∞ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏ –∏—Å—Ç–æ—Ä–∏—é.

–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:
/start ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/history ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤"""

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéØ –í—ã–±—Ä–∞—Ç—å –∂–∞–Ω—Ä", callback_data="genres")],
        [InlineKeyboardButton(text="üïí –ò—Å—Ç–æ—Ä–∏—è", callback_data="history")]
    ])
    await message.answer(text, parse_mode="Markdown", reply_markup=kb)

@router.callback_query(F.data == "genres")
async def show_genres(callback: CallbackQuery):
    buttons = [InlineKeyboardButton(text=name, callback_data=f"genre_{eng}") for name, eng in GENRES.items()]
    rows = [buttons[i:i+2] for i in range(0, len(buttons), 2)]
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏ –∂–∞–Ω—Ä:", reply_markup=InlineKeyboardMarkup(inline_keyboard=rows))

@router.callback_query(F.data.startswith("genre_"))
async def handle_genre(callback: CallbackQuery):
    genre = callback.data.split("_", 1)[1]
    await callback.message.answer(f"üîç –ò—â—É —Ñ–∏–ª—å–º—ã –≤ –∂–∞–Ω—Ä–µ ¬´{genre}¬ª —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º –æ—Ç 4.0...")

    data = await fetch_movies(genre, page=1)
    movies = data.get("docs", [])

    if not movies:
        await callback.message.answer("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–∂–µ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º –æ—Ç 4.0.")
        return

    # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–ª—å–º–æ–≤
    set_session(callback.from_user.id, {
        "genre": genre,
        "page": 1,
        "total_movies": len(movies),
        "start_index": 0  # –ò–Ω–¥–µ–∫—Å –ø–µ—Ä–≤–æ–≥–æ —Ñ–∏–ª—å–º–∞ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    })
    await send_movie_list(callback.message, movies, 1, 0)  # –ü–µ—Ä–µ–¥–∞—ë–º start_index=0

async def send_movie_list(message_or_callback, movies, page, start_index):
    text = f"üîç –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}\n\n"
    buttons = []
    for i, m in enumerate(movies, 1):
        year = m.get("year", "?")
        rating = m.get("rating", {}).get("kp", 0)
        name = m.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        # ‚úÖ –ù—É–º–µ—Ä–∞—Ü–∏—è —Å–∫–≤–æ–∑–Ω–∞—è: start_index + i
        # ‚úÖ –ö–Ω–æ–ø–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–æ–º–µ—Ä –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞
        text += f"{start_index + i}. üé¨ *{name}* ({year}) ‚Äî ‚≠ê{rating}\n"
        buttons.append([InlineKeyboardButton(text=f"üëÅÔ∏è {start_index + i}. {name}", callback_data=f"detail_{m['id']}")])

    nav_buttons = []
    if page > 1:
        nav_buttons.append(InlineKeyboardButton(text="‚èÆÔ∏è –ù–∞–∑–∞–¥", callback_data="prev_page"))
    nav_buttons.append(InlineKeyboardButton(text="‚è≠Ô∏è –î—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã", callback_data="next_page"))
    buttons.append(nav_buttons)

    if hasattr(message_or_callback, 'message'):
        await message_or_callback.message.edit_text(text, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
    else:
        await message_or_callback.answer(text, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))

@router.callback_query(F.data == "next_page")
async def next_page(callback: CallbackQuery):
    session = get_session(callback.from_user.id)
    if not session:
        await callback.answer("–°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏ —Å /start.")
        return
    new_page = session["page"] + 1
    data = await fetch_movies(session["genre"], page=new_page)
    movies = data.get("docs", [])
    if not movies:
        await callback.answer("–ë–æ–ª—å—à–µ —Ñ–∏–ª—å–º–æ–≤ –Ω–µ—Ç.", show_alert=True)
        return
    # ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –Ω–∞—á–∞–ª–∞ —Å–ø–∏—Å–∫–∞
    start_index = session.get("start_index", 0) + 20
    set_session(callback.from_user.id, {
        "genre": session["genre"],
        "page": new_page,
        "total_movies": len(movies),
        "start_index": start_index
    })
    await send_movie_list(callback, movies, new_page, start_index)

@router.callback_query(F.data == "prev_page")
async def prev_page(callback: CallbackQuery):
    session = get_session(callback.from_user.id)
    if not session or session["page"] <= 1:
        await callback.answer("–≠—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞.")
        return
    new_page = session["page"] - 1
    data = await fetch_movies(session["genre"], page=new_page)
    movies = data.get("docs", [])
    # ‚úÖ –£–º–µ–Ω—å—à–∞–µ–º –∏–Ω–¥–µ–∫—Å –Ω–∞—á–∞–ª–∞ —Å–ø–∏—Å–∫–∞
    start_index = session.get("start_index", 0) - 20
    set_session(callback.from_user.id, {
        "genre": session["genre"],
        "page": new_page,
        "total_movies": len(movies),
        "start_index": start_index
    })
    await send_movie_list(callback, movies, new_page, start_index)

@router.callback_query(F.data.startswith("detail_"))
async def show_detail(callback: CallbackQuery):
    movie_id = callback.data.split("_", 1)[1]
    headers = {"X-API-KEY": KINOPOISK_API_KEY}
    async with httpx.AsyncClient() as client:
        r = await client.get(f"https://api.kinopoisk.dev/v1.4/movie/{movie_id}", headers=headers)
        movie = r.json() if r.status_code == 200 else None

    if not movie:
        await callback.answer("–§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    add_to_history(callback.from_user.id, movie)

    name = movie.get("name", "‚Äî")
    year = movie.get("year", "?")
    rating = movie.get("rating", {}).get("kp", 0)
    runtime = movie.get("movieLength", "?")
    genres = ", ".join([g["name"] for g in movie.get("genres", [])])
    desc = movie.get("description") or movie.get("shortDescription", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
    poster = movie.get("poster", {}).get("url")

    # ‚úÖ –°–æ–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    platforms = ""
    watchability = movie.get("watchability", {})
    if watchability and "items" in watchability:
        for item in watchability["items"]:
            name = item.get("name", "")
            url = item.get("url", "")
            if name and url:
                platforms += f"[{name}]({url})\n"

    # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–∞–π—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
    free_sites = ""
    # –ü—Ä–∏–º–µ—Ä: –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–∏ —Å—Å—ã–ª–∫–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å API –¥–ª—è –ø–æ–∏—Å–∫–∞
    # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –¥–æ–±–∞–≤–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö
    free_sites += "[üåê –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞ Filmix](https://filmix.co/search/?q={name})\n"
    free_sites += "[üåê –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞ Kinopoisk](https://www.kinopoisk.ru/film/{movie_id}/)\n"
    free_sites += "[üåê –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞ OnlineCinema](https://onlinecinema.net/search?q={name})\n"

    # ‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∏–ª—å–º –Ω–∞ Kinopoisk
    kp_url = f"https://www.kinopoisk.ru/film/{movie_id}/"

    caption = f"""üé¨ *{name}* ‚Ä¢ {year}
‚≠ê {rating} | ‚è≥ {runtime} –º–∏–Ω | üéØ {genres}

üìå {desc}

üèÜ –ù–∞–≥—Ä–∞–¥—ã: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö
üåê –ì–¥–µ —Å–º–æ—Ç—Ä–µ—Ç—å:
{platforms}
üîó [–°–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ Kinopoisk]({kp_url})

üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–∞–π—Ç—ã:
{free_sites}
"""

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –≠—Ç–æ –æ–Ω", callback_data="selected")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_list")]
    ])

    if poster:
        await callback.message.answer_photo(photo=poster, caption=caption, parse_mode="Markdown", reply_markup=kb)
    else:
        await callback.message.answer(caption, parse_mode="Markdown", reply_markup=kb)

@router.callback_query(F.data == "selected")
async def selected(callback: CallbackQuery):
    await callback.message.answer("‚úÖ –û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –§–∏–ª—å–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –∏—Å—Ç–æ—Ä–∏—é.")

@router.callback_query(F.data == "back_to_list")
async def back_to_list(callback: CallbackQuery):
    session = get_session(callback.from_user.id)
    if not session:
        await callback.answer("–°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏ —Å /start.")
        return
    genre = session["genre"]
    page = session["page"]
    start_index = session.get("start_index", 0)
    data = await fetch_movies(genre, page=page)
    movies = data.get("docs", [])
    await send_movie_list(callback.message, movies, page, start_index)

@router.callback_query(F.data == "history")
async def show_history(callback: CallbackQuery):
    from session import user_history
    history = user_history.get(callback.from_user.id, [])
    if not history:
        await callback.message.answer("ugh –¢–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
        return
    text = "ugh –¢–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è:\n\n"
    for m in history[-5:]:
        text += f"‚Ä¢ üé¨ {m['name']} ({m.get('year', '?')})\n"
    await callback.message.answer(text)

dp.include_router(router)

if __name__ == "__main__":
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    asyncio.run(dp.start_polling(bot))
